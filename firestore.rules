rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to get user's role and check authentication state
    function getUserRole() {
      return get(/databases/$(database)/documents/user_roles/$(request.auth.uid)).data.role;
    }
    function isAdmin() {
      return request.auth != null && getUserRole() == 'admin';
    }
    function isStaff() {
      return request.auth != null && getUserRole() == 'staff';
    }
    function isAuthenticated() {
      return request.auth != null;
    }

    // user_roles/{userId} collection
    match /user_roles/{userId} {
      // Admins can read any user's role document.
      // Authenticated users can only read their own role document.
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());

      // Only admins can create, update, or delete role documents.
      allow create, update, delete: if isAdmin();
    }

    // inventory/{productId} collection
    match /inventory/{productId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() || isStaff();
      allow update: if isAdmin() || isStaff();
      allow delete: if isAdmin();
    }

    // orders/{orderId} collection
    match /orders/{orderId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() || isStaff();
      allow update: if isAdmin() || isStaff(); // Staff can update status
      allow delete: if isAdmin(); // Admin can delete directly
    }

    // suppliers/{supplierId} collection
    match /suppliers/{supplierId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // locations/{locationId} collection
    match /locations/{locationId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Default deny-all rule for any path not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
