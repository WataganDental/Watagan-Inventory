rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for 'locations' collection
    match /locations/{locationId} { // Changed {document} to {locationId} for clarity
      // Admins can write (create, update, delete)
      allow write: if request.auth != null && request.auth.token.admin == true;
      // Any authenticated user (including admins) can read
      allow read: if request.auth != null;
    }

    // Rules for 'suppliers' collection
    match /suppliers/{supplierId} { // Changed {document} to {supplierId} for clarity
      // Admins can write (create, update, delete)
      allow write: if request.auth != null && request.auth.token.admin == true;
      // Any authenticated user (including admins) can read
      allow read: if request.auth != null;
    }

    // Rules for 'inventory' collection
    // TODO: Define specific rules for the 'inventory' collection based on application needs.
    // Example: Allow authenticated users to read, and admins to write.
    match /inventory/{itemId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true; // Example: Admins can write
    }

    // Rules for 'user_roles' collection
    // TODO: Define specific rules for the 'user_roles' collection.
    // This is critical for security and functionality of user role management.
    match /user_roles/{userId} {
      // Example: Only the user themselves or an admin can read their roles
      allow read: if request.auth != null && (request.auth.uid == userId || request.auth.token.admin == true);
      // Example: Only admins can write/modify roles
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // Add rules for any other collections your app uses (e.g., 'orders')
    // match /orders/{orderId} {
    //   // Example: Authenticated users can create orders
    //   allow create: if request.auth != null;
    //   // Example: Users can read/update/delete their own orders, admins can manage all orders
    //   allow read, update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || request.auth.token.admin == true);
    // }
  }
}
